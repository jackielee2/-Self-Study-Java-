==========================================================
4.	프로젝트 생성 및 실행..
==========================================================

	-------------------
	1)	프로젝트 생성..
	-------------------
		
		---------------------
		1)	퍼스펙티브 확인..
		---------------------

			ㄴ	[ Java Perspective ]가 아닌 경우
				설정할 것..

			ㄴ	[ 메뉴 ]
				> [ Window ]
				> [ Perspective ]
				> [ Open Perspective ]
				> [ Java ]


		-------------------
		2)	프로젝트 생성..
		-------------------

			ㄴ	[ 메뉴 ]
				> [ File ]
				> [ New ]
				> [ Java Project ]


			ㄴ	[ Project name ] 설정..
			ㄴ	[ Create module-info.java file ]
				ㄴ	False..
				ㄴ	체크		:	모듈 프로젝트로 생성..
					체크 해제	:	일반 프로젝트로 생성..
			ㄴ	그외 기존 설정 유지한 뒤
				[ Finish ] 클릭..
				


	--------------------
	2)	소스 파일 생성과
		작성..
	--------------------

		----------
		-	개요..
		----------

			-	[ Hello.java ] 파일을
				생성하고 "Hello, Java"를
				출력하는 코드 작성..


		----------
		-	적용..
		----------

			1)	패키지 생성..

				ㄴ	소스 파일 및 컴파일 된
					바이트 코드 파일들을
					기능별로 쉽게 관리하기
					위한 기능..

				ㄴ	파일 시스템의 폴더 또는
					디렉토리와 유사..

				ㄴ	[ Package Explorer ]
					> [ 마우스 우클릭 ]
					> [ New ]
					> [ Package ] 클릭..

					ㄴ	[ New Java Package ]
						> [ Name ]
							ㄴ	"sector01.exam01"


			2)	클래스 생성..

				ㄴ	[ Package Explorer ]
					> [ 마우스 우클릭 ]
					> [ New ]
					> [ Class ] 클릭..


					ㄴ	[ New Java Class ]
						> [ Name ]
							ㄴ	"Hello"

						> [ public static void main(String[] args) ]
							ㄴ	true..
							ㄴ	main() 메소드를 자동 추가..

						
	
	---------------
	3)	테스트 소스
		구현..
	---------------

		-	소스 구현 후 저장하면
			자동으로 컴파일 됨..

			ㄴ	성공적으로 컴파일 되면
				[ 프로젝트 경로 ]
				> [ bin 폴더 ] 내부에
				패키지 폴더와 함께
				( sector01 / exam01 )
				"Hello.class"로 생성됨..


		-	이하
			[ sector01 ]
			> [ exam01 ]
			> [ Hello.java ] 참고..

					


	-----------------
	4)	바이트 코드..
		실행..
	-----------------

		방법 1)	[ 툴바 ]
				> [ Run 버튼 ] 클릭..


		방법 2)	[ Package Explorer ]
				> [ 실행시키려는 소스 선택 ]
				> [ 마우스 우클릭 ]
				> [ Run As ]
				> [ Java Application ] 클릭..



	---------------------
	**	명령 프롬프트에서
		컴파일 및 실행..
	---------------------

		----------
		-	개요..
		----------

			-	이클립스와 같은 IDE를 통해
				쉽고 편리하게 작업이 가능..

			-	간혹 명령 프롬프트 또는
				터미널과 같은 명령 라인에서
							( Command Line )
				javac와 java 명령어로 직접
				컴파일하고 실행해야하는
				경우도 발생..

		
		----------
		-	적용..
		----------

			1)	명령 프롬프트 실행..

				ㄴ	[ 윈도우 검색창 ]
					> [ "cmd" 검색 및 실행]


			2)	프로젝트 경로로 이동..

				ㄴ	드라이버 이동..
					예)	"c:" 엔터키,
						"d:" 엔터키 등..

				ㄴ	디렉토리 이동..

					cd [ 경로명 ]
					예)	cd D:\_My Project\_Java\Self-Study-Java\_Project\chap_01
					

			3)	소스 파일 컴파일..

				ㄴ	javac -d [ 바이트 코드 파일 저장 위치 ] [ 소스 경로/*.java ]

				ㄴ	javac -d bin src/sector01/exam01/*.java

					ㄴ	바이트 코드 파일이 생성되었는지 확인..
						
						ㄴ	tree /f /a



			4)	실행하기..

				ㄴ	윈도우에서 작성한 소스를
					리눅스에서 실행하길 원하는 경우에
					바이트 코드 파일만 있으면 됨..

					ㄴ	리눅스용 JVM이 리눅스에서
						실행 가능한 기계어로 번역 후 
						실행하기 때문..

				ㄴ	[ 프로젝트 폴더 ]
					> [ bin 폴더 ]에 있는
					내용만 복사해서 실행..


				ㄴ	d:tmp 폴더 생성 후
					붙혀넣기..


				ㄴ	java 명령어로 바이트 코드 파일 실행..
				
					ㄴ	java 명령어의 역할..

						ㄴ	jdk에 포함되어 있는
							JVM을 구동 시켜
							바이트 코드 파일을 실행..

					ㄴ	java -cp [ 바이트 코드 파일 위치 ] [ 패키지.패키지.바이트코드 파일 이름 ]

						ㄴ	-cp..
							ㄴ	classpath의 약어..
							ㄴ	패키지를 포함한
								바이트 코드 파일의 위치..
							ㄴ	패키지를 포함한 바이트 코드 파일이
								java 명령어를 실행하는 위치에
								있다면 . 을 입력..
								ㄴ	확장자 "*.class"는 생략..
								ㄴ	패키지 구분은 "."을 사용..
									ㄴ	패키지는 바이트 코드의
										일부분이기 때문..
								

					ㄴ	적용..

						1)	명령 프롬프트에서
							[ d:tmp ] 로 이동..
						

						2)	java -cp . sector01.exam01.Hello


						3)	실행..

							ㄴ	Hello, Java 출력 확인..

					




==========================================================

	[ 참고 ]

		혼자 공부하는 자바(개정판)
		https://hongong.hanbit.co.kr/%EC%9E%90%EB%B0%94/

		[CMD] tree 명령어로 폴더 구조 시각화하기
		https://hianna.tistory.com/864


==========================================================