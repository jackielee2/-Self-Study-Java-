//=========================================================================
/*

	비교 연산자 ( <, <=, >, >=, ==, != )
	
	-	피연산자의 대소 또는 동등을 비교하여
		true / false로 반환..
		
	-	대소 연산자는 [ boolean ]을 제외한
	 	기본 타입에 사용가능..
	 	
	 	동등 연산자는 모든 타입에 사용 가능..
	 	
 	-	주로 조건문, 반복문에서
	  	실행흐름을 제어할때 사용..
	  	
	-	피연산자가 char 타입이면
	 	유니코드로 변환 후
	 	비교 연산 수행..
	
	  	
	-	정리..
	
		=============================================================
		구분..		|	연산식..				|	설명..
	  	=============================================================
	  				|		|	==	|		|	A와 B가 같은지 비교..
	  	동등 비교..	|		---------		-------------------------
	  				|		|	!=	|		|	A와 B가 다른지 비교..
	  	-------------	A	---------	B	-------------------------
	  				|		|	>	|		|	A가 B보다 더 큰지 비교..
	  				|		---------		-------------------------
	  				|		|	>=	|		|	A가 B보다 더 크거나
	  				|		|		|		|	같은지 비교..
	  	크기 비교..	|		---------		-------------------------
	  				|		|	<	|		|	A가 B보다 더 작은지 비교..
	  				|		---------		-------------------------
	  				|		|	<=	|		|	A가 B보다 더 작거나
	  				|		|		|		|	같은지 비교..		
		=============================================================
		
		
*/
//=========================================================================
package sector03.exam01;
//=========================================================================
public class CompareConcat_Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int num1 = 10;
		int num2 = 10;
		
		boolean res1 = (num1 == num2);
		System.out.println("res1 = " + res1);
		
		boolean res2 = (num1 != num2);
		System.out.println("res2 = " + res2);
		
		boolean res3 = (num1 <= num2);
		System.out.println("res3 = " + res3);
		
		
		char char1 = 'A';
		char char2 = 'B';
		boolean res4 = (char1 < char2);
		System.out.println("res4 = " + res4);
		
		//	비교 연산 수행하기 전에
		//	피연산자의 타입을 일치시킴..
		//	-	'A'가 int 타입으로 변환..
		boolean res5 = 'A' == 65;
		System.out.println("res5 = " + res5);
		
		//	3 ---> 3.0 으로 변환..
		boolean res6 = 3 == 3.0;
		System.out.println("res6 = " + res6);
		
		//	0.1f ---> 0.1의 근사값으로 변환..
		//		( -	0.10000000149011612 )
		//	-	부동소수점 방식이 0.1을
		//		정확히 표현 불가..
		//	-	솔루션..
		//		ㄴ	둘다 float 또는 int로
		//			변환하여 비교..
		boolean res7 = 0.1 == 0.1f;		//	---	( X )
		//boolean res7 = (float)0.1 == 0.1f;		//	---	( O )
		//boolean res7 = (int)0.1 == (int)0.1f;		//	---	( O )
		System.out.println("res7 = " + res7);
		
		
		//	동등 비교 연산자는 사용 가능함..
		//	-	문자열을 비교하는 용도로는
		//		사용되지 않음..
		//	-	String.equals()..
		//	대소 비교 연산자는 사용 불가..
		String str1 = "Test";
		String str2 = "Test";
		//boolean res8 = str1 == str2;
		//boolean res8 = str1 <= str2;
		boolean res8 = str1.equals(str2);
		System.out.println("res8 = " + res8);
		
	}

}
//=========================================================================